---
benchmark_type: lxd
categories:
  - name: Control Plane Components
    sub_category:
      name: API Server
      audit_tests:
        - name: 4.2.13 Ensure that the Kubelet only makes use of Strong Cryptographic
            Ciphers
          description: Ensure that the Kubelet is configured to only use strong cryptographic
            ciphers.
          profile_applicability: Level 1 - Worker Node
          audit:
            - ps -ef | grep kubelet |grep ' --config' | grep -o ' --config=[^"]\S*' | awk
              -F "=" '{print $2}' |awk 'FNR <= 1'
            - 'sudo grep ''TLSCipherSuites'' ${0} |grep ''TLSCipherSuites:[^"]\S*''| awk -F
        ":" ''{print $2}'' |awk ''FNR <= 1'''
            - 'echo ${1} > tmp && sed ''s/,/\n/g'' tmp'
            - ps -ef | grep kubelet |grep 'TLSCipherSuites' | grep -o 'TLSCipherSuites=[^"]\S*'
              | awk -F "=" '{print $2}' |awk 'FNR <= 1'
            - 'echo ${3} > tmp && sed ''s/,/\n/g'' tmp'
          remediation: |-
            If using a Kubelet config file, edit the file to set TLSCipherSuites: to TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
            ,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256 or to a subset of these values.
            If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the --tls-cipher-suites parameter as follows, or to a subset of these values.
            --tls-cipher- suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM _SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM _SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM _SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
          check_type: multi_param
          impact: Kubelet clients that cannot support modern cryptographic ciphers will
            not be able to make connections to the Kubelet API.
          eval_expr: "'${2}'; IN ('TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256','TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256'
        ,'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305','TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384'
        ,'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305','TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384','TLS_RSA_WITH_AES_256_GCM_SHA384','TLS_RSA_WITH_AES_128_GCM_SHA256');
        || '${4}'; IN ('TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256','TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256'
        ,'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305','TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384','TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305','TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384','TLS_RSA_WITH_AES_256_GCM_SHA384','TLS_RSA_WITH_AES_128_GCM_SHA256');"
          default_value: By default the Kubernetes API server supports a wide range of
            TLS ciphers
          references:
            - https://github.com/kubernetes/kubernetes/pull/45059
            - https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#kubelet-configuration
