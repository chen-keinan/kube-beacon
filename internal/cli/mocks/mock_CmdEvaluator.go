// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chen-keinan/beacon/internal/cli/commands (interfaces: CmdEvaluator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	eval "github.com/chen-keinan/go-command-eval/eval"
	gomock "github.com/golang/mock/gomock"
)

// MockCmdEvaluator is a mock of CmdEvaluator interface.
type MockCmdEvaluator struct {
	ctrl     *gomock.Controller
	recorder *MockCmdEvaluatorMockRecorder
}

// MockCmdEvaluatorMockRecorder is the mock recorder for MockCmdEvaluator.
type MockCmdEvaluatorMockRecorder struct {
	mock *MockCmdEvaluator
}

// NewMockCmdEvaluator creates a new mock instance.
func NewMockCmdEvaluator(ctrl *gomock.Controller) *MockCmdEvaluator {
	mock := &MockCmdEvaluator{ctrl: ctrl}
	mock.recorder = &MockCmdEvaluatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdEvaluator) EXPECT() *MockCmdEvaluatorMockRecorder {
	return m.recorder
}

// EvalCommand mocks base method.
func (m *MockCmdEvaluator) EvalCommand(arg0 []string, arg1 string) eval.CmdEvalResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalCommand", arg0, arg1)
	ret0, _ := ret[0].(eval.CmdEvalResult)
	return ret0
}

// EvalCommand indicates an expected call of EvalCommand.
func (mr *MockCmdEvaluatorMockRecorder) EvalCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalCommand", reflect.TypeOf((*MockCmdEvaluator)(nil).EvalCommand), arg0, arg1)
}
