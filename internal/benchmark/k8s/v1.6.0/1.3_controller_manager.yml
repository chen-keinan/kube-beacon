---
benchmark_type: k8s
categories:
  - name: Control Plane Components
    sub_category:
      name: 1.3 Controller Manager
      audit_tests:
        - name: 1.3.1 Ensure that the --terminated-pod-gc-threshold argument is set as
            appropriate
          description: Activate garbage collector on pod termination, as appropriate.
          profile_applicability: Master
          audit:
            - ps -ef | grep kube-controller-manager |grep ' --terminated-pod-gc-threshold' | grep -o ' --terminated-pod-gc-threshold=[^"]\S*' | awk -F "=" '{print $2}' |awk 'FNR <= 1'
            -  awk -v FS="--terminated-pod-gc-threshold=" 'NF>1{print $2}' /etc/kubernetes/manifests/kube-controller-manager.yaml
          remediation: |-
            Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube- controller-manager.yaml on the master node and set the --terminated-pod-gc- threshold to an appropriate threshold, for example:
            --terminated-pod-gc-threshold=10
          check_type: multi_param
          impact: None
          eval_expr: "'${0}' == '10'; && '${0}' == '${1}';"
          default_value: "--terminated-pod-gc-threshold is set to 12500."
          references:
            - https://kubernetes.io/docs/admin/kube-controller-manager/
            - https://github.com/kubernetes/kubernetes/issues/28484
        - name: 1.3.2 Ensure that the --profiling argument is set to false
          description: Disable profiling, if not needed.
          profile_applicability: Master
          audit:
            - ps -ef | grep kube-controller-manager |grep ' --profiling' | grep -o ' --profiling=[^"]\S*' | awk -F "=" '{print $2}' |awk 'FNR <= 1'
            -  awk -v FS="--profiling=" 'NF>1{print $2}' /etc/kubernetes/manifests/kube-controller-manager.yaml
          remediation: |-
            Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube- controller-manager.yaml on the master node and set the below parameter.
            --profiling=false
          check_type: multi_param
          impact: Profiling information would not be available.
          eval_expr: "'${0}' == 'false'; && '${0}' == '${1}';"
          default_value: By default, profiling is enabled.
          references:
            - https://kubernetes.io/docs/admin/kube-controller-manager/
            - https://github.com/kubernetes/community/blob/master/contributors/devel/profiling.md,
        - name: 1.3.3 Ensure that the --use-service-account-credentials argument is set
            to true
          description: Use individual service account credentials for each controller.
          profile_applicability: Master
          audit:
            - ps -ef | grep kube-controller-manager |grep ' --use-service-account-credentials' | grep -o ' --use-service-account-credentials=[^"]\S*' | awk -F "=" '{print $2}' |awk 'FNR <= 1'
            -  awk -v FS="--use-service-account-credentials=" 'NF>1{print $2}' /etc/kubernetes/manifests/kube-controller-manager.yaml
          remediation: |-
            Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube- controller-manager.yaml on the master node to set the below parameter.
            --use-service-account-credentials=true
          check_type: multi_param
          impact: |-
            Whatever authorizer is configured for the cluster, it must grant sufficient permissions to the service accounts to perform their intended tasks. When using the RBAC authorizer, those roles are created and bound to the appropriate service accounts in the kube-system namespace automatically with default roles and rolebindings that are auto-reconciled on startup.
            If using other authorization methods (ABAC, Webhook, etc), the cluster deployer is responsible for granting appropriate permissions to the service accounts (the required permissions can be seen by inspecting the controller-roles.yaml and controller-role- bindings.yaml files for the RBAC roles.
          eval_expr: "'${0}' == 'true'; && '${0}' == '${1}';"
          default_value: By default, --use-service-account-credentials is set to false.
          references:
            - https://kubernetes.io/docs/admin/kube-controller-manager/
            - https://kubernetes.io/docs/admin/service-accounts-admin/
            - https://github.com/kubernetes/kubernetes/blob/release-1.6/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/controller-roles.yaml
            - https://github.com/kubernetes/kubernetes/blob/release-1.6/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/controller-role-bindings.yaml
            - https://kubernetes.io/docs/admin/authorization/rbac/#controller-roles
        - name: 1.3.4 Ensure that the --service-account-private-key-file argument is set
            as appropriate
          description: Explicitly set a service account private key file for service accounts
            on the controller manager.
          profile_applicability: Master
          audit:
            - ps -ef | grep kube-controller-manager |grep ' --service-account-private-key-file' | grep -o ' --service-account-private-key-file=[^"]\S*' | awk -F "=" '{print $2}' |awk 'FNR <= 1'
            -  awk -v FS="--service-account-private-key-file=" 'NF>1{print $2}' /etc/kubernetes/manifests/kube-controller-manager.yaml
          remediation: |-
            Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube- controller-manager.yaml on the master node and set the --service-account-private- key-file parameter to the private key file for service accounts.
            --service-account-private-key-file=<filename>
          check_type: multi_param
          impact: You would need to securely maintain the key file and rotate the keys based on your organization''s key rotation policy.
          eval_expr: "'${0}' != ''; && '${0}' == '${1}';"
          default_value: By default, --service-account-private-key-file it not set.
          references:
            - https://kubernetes.io/docs/admin/kube-controller-manager/
        - name: 1.3.5 Ensure that the --root-ca-file argument is set as appropriate
          description: Allow pods to verify the API server's serving certificate before
            establishing connections.
          profile_applicability: Master
          audit:
            - ps -ef | grep kube-controller-manager |grep ' --root-ca-file' | grep -o ' --root-ca-file=[^"]\S*' | awk -F "=" '{print $2}' |awk 'FNR <= 1'
            -  awk -v FS="--root-ca-file=" 'NF>1{print $2}' /etc/kubernetes/manifests/kube-controller-manager.yaml
          remediation: |-
            Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube- controller-manager.yaml on the master node and set the --root-ca-file parameter to the certificate bundle file`.
            --root-ca-file=<path/to/file>
          check_type: multi_param
          impact: You need to setup and maintain root certificate authority file.
          eval_expr: "'${0}' != ''; && '${0}' == '${1}';"
          default_value: By default, --root-ca-file is not set.
          references:
            - https://kubernetes.io/docs/admin/kube-controller-manager/
            - https://github.com/kubernetes/kubernetes/issues/11000
        - name: 1.3.6 Ensure that the RotateKubeletServerCertificate argument is set to
            true
          description: Enable kubelet server certificate rotation on controller-manager.
          profile_applicability: Master
          audit:
            - ps -ef | grep kube-controller-manager |grep ' --RotateKubeletServerCertificate' | grep -o ' --RotateKubeletServerCertificate=[^"]\S*' | awk -F "=" '{print $2}' |awk 'FNR <= 1'
            -  awk -v FS="feature-gates=RotateKubeletServerCertificate=" 'NF>1{print $2}' /etc/kubernetes/manifests/kube-controller-manager.yaml
          remediation: |-
            Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube- controller-manager.yaml on the master node and set the --feature-gates parameter to include RotateKubeletServerCertificate=true.
            --feature-gates=RotateKubeletServerCertificate=true
          check_type: multi_param
          impact: None
          eval_expr: "'${0}' != ''; && '${0}' == '${1}';"
          default_value: By default, RotateKubeletServerCertificate is set to "true" this
            recommendation verifies that it has not been disabled.
          references:
            - https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#approval-controller
            - https://github.com/kubernetes/features/issues/267
            - https://github.com/kubernetes/kubernetes/pull/45059
            - https://kubernetes.io/docs/admin/kube-controller-manager/
        - name: 1.3.7 Ensure that the --bind-address argument is set to 127.0.0.1
          description: Do not bind the Controller Manager service to non-loopback insecure
            addresses.
          profile_applicability: Master
          audit:
            - ps -ef | grep kube-controller-manager |grep ' --bind-address' | grep -o ' --bind-address=[^"]\S*' | awk -F "=" '{print $2}' |awk 'FNR <= 1'
            -  awk -v FS="--bind-address=" 'NF>1{print $2}' /etc/kubernetes/manifests/kube-controller-manager.yaml
          remediation: Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-
            controller-manager.yaml on the master node and ensure the correct value for
            the -- bind-address parameter
          check_type: multi_param
          impact: None
          eval_expr: "'${0}' == '127.0.0.1'; && '${0}' == '${1}';"
          default_value: By default, the --bind-address parameter is set to 0.0.0.0
          references:
            - https://kubernetes.io/docs/reference/command-line-tools-reference/kube- controller-manager/
